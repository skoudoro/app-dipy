#!/bin/bash
#PBS -l nodes=1:ppn=6
#PBS -l vmem=16gb
#PBS -l walltime=10:00:00

cmd=`jq -r .command config.json`
case "$cmd" in

    dipy_median_otsu)
        arg="   --force \
                --out_dir $(pwd) \
                --save_masked \
                --numpass $(jq -r .numpass config.json) \
                --median_radius $(jq -r .median_radius config.json) \
                --out_mask mask.nii.gz \
                --out_masked dwi.nii.gz \
                $(jq -r .dwi config.json)"

        # Todo: Add these options after dipy release 0.14.0
        # --vol_idx $(jq -r .vol_idx config.json) \
        # --dilate $(jq -r .dilate config.json)
        autocrop=$(jq -r .autocrop config.json)
        if [ $autocrop == "true" ]; then
            arg=" --autocrop $arg"
        fi

        #bypass bvals / bvecs for masked output
        cp $(jq -r .bvals config.json) dwi.bvals
        cp $(jq -r .bvecs config.json) dwi.bvecs
        ;;

    dipy_fit_dti)
        arg="   --force \
                --out_dir $(pwd) \
                --b0_threshold $(jq -r .b0_threshold config.json) \
                --bvecs_tol $(jq -r .bvecs_tol config.json) \
                --out_strat what \
                $(jq -r .dwi config.json) $(jq -r .bvals config.json) $(jq -r .bvecs config.json) $(jq -r .mask config.json)"
        ;;
    
    dipy_fit_dki)
        arg="   --force \
                --out_dir $(pwd) \
                --b0_threshold $(jq -r .b0_threshold config.json) \
                --out_strat what \
                $(jq -r .dwi config.json) $(jq -r .bvals config.json) $(jq -r .bvecs config.json) $(jq -r .mask config.json)"
        ;;
    
    dipy_fit_csa)
        arg="   --force \
                --out_dir $(pwd) \
                --b0_threshold $(jq -r .b0_threshold config.json) \
                --out_strat what \
                $(jq -r .dwi config.json) $(jq -r .bvals config.json) $(jq -r .bvecs config.json) $(jq -r .mask config.json)"
        ;;
    
    dipy_fit_csd)
        arg="   --force \
                --out_dir $(pwd) \
                --b0_threshold $(jq -r .b0_threshold config.json) \
                --out_strat what \
                $(jq -r .dwi config.json) $(jq -r .bvals config.json) $(jq -r .bvecs config.json) $(jq -r .mask config.json)"
        ;;
    
    dipy_fit_mapmri)
        arg="   --force \
                --out_dir $(pwd) \
                --b0_threshold $(jq -r .b0_threshold config.json) \
                --out_strat what \
                $(jq -r .dwi config.json) $(jq -r .bvals config.json) $(jq -r .bvecs config.json) $(jq -r .small_delta config.json)
                $(jq -r .big_delta config.json)"
        ;;

    dipy_nlmeans)
        arg="   --force \
                --out_dir $PWD \
                --sigma $(jq -r .sigma config.json) \
                --out_denoised dwi.nii.gz \
                $(jq -r .dwi config.json)"
        ;;
        
    dipy_mask:dwi)
        cmd="dipy_mask"
        arg=" --force \
              --out_dir $PWD \
              --out_mask mask.nii.gz \
              $(jq -r .dwi config.json) $(jq -r .lb config.json)"
        ;;

    dipy_mask:tensor)
        cmd="dipy_mask"
        arg=" --force \
              --out_dir $PWD \
              --out_mask mask.nii.gz \
              $(jq -r .fa config.json) $(jq -r .lb config.json)"
        ;;
    
    dipy_reslice)
        arg="   --force \
                --out_dir $PWD \
                --out_resliced dwi.nii.gz \
                $(jq -r .dwi config.json) $(jq -r .new_vox_size config.json)"
           
                #pass through bvecs/bvals
                cp $(jq -r .bvecs config.json) dwi.bvecs
                cp $(jq -r .bvals config.json) dwi.bvals
        ;;
    
    dipy_info)
        arg="   --force \
                $(jq -r .dwi config.json) $(jq -r .bvals config.json) $(jq -r .bvecs config.json)"
        ;;
    
    dipy_track_det)
        arg="   --force \
                --out_dir $PWD \
                $(jq -r .peaks config.json) $(jq -r .stop config.json) $(jq -r .seed config.json)"
        
        ;;
    *)
        echo "invalid command: $cmd"
        exit 1
esac

echo "running $cmd $arg"
SINGULARITYENV_PYTHONNOUSERSITE=true singularity exec -e docker://brainlife/dipy:0.14 $cmd $arg
